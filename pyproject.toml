[project]
name = "template"
version = "0.0.1"
description = "Template repository for python projects"
authors = [
    { name = "Marco Giovanni Bignotti", email = "bignottimarco95@gmail.com" },
]
dependencies = [
    "numpy>=1.26.2,<2.0",
    "polars>=0.20.29,<1.0",
    "python-dotenv>=1.0.0,<1.1",
    "attrs>=23.2.0,<23.3",
    "dynaconf>=3.2.5,<3.3",
    "typer>=0.12.3,<0.13",
    "rich>=13.7.1,<13.8",
    "loguru>=0.7.2,<0.8",
]
requires-python = ">=3.11,<3.12"
readme = { file = "README.md", content-type = "text/markdown" }


[project.optional-dependencies]
dev = [
    "mypy>=1.10.0",
    "pre-commit>=3.7.1",
    "commitizen>=3.26.0",
    "pip-tools>=7.4.1",
    "ruff>=0.4.4"
]
test = ["pytest>=8.2.1", "pytest-html-reporter>=0.2.9", "pytest-cov==5.0"]
notebooks = [
    "jupyterlab>=4.2.0,<4.3",
    "matplotlib>=3.9.0,<3.10",
]
all = ["template[dev,test,notebooks]"]


[project.scripts]
template = "template:main"


[build-system]
requires = ["setuptools >= 70.0"]
build-backend = "setuptools.build_meta"


[tool.setuptools.packages.find]
include = ["template*"]


[tool.commitizen]
name = "cz_customize"


[tool.commitizen.customize]
schema_pattern = "^((build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump|WIP)(\\([a-zA-Z._-]+\\))?!?: )[a-zA-Z0-9. _-]+([\\n\\r][:a-zA-Z0-9._\\-!?\\s]*)*"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv*",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "examples",
]

# (Not quite the) Same as Black.
line-length = 120
indent-width = 4

[tool.ruff.lint]
select = [
    "F", # Pyflakes
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "I", # isort
    "N", # naming
    # "D", # pydocstyle (TODO: re-enable in future)
    "UP",  # pyupgrade
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "DTZ", # flake8-datetimez
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "PLE", # Error
    "PLR", # Refactor
    "TRY", # tryceratops
    "NPY", # NumPy-specific rules
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

ignore = [
    "N806",   # non-lowercase-variable-in-function (used in sklearn API)
    "N803",   # invalid-argument-name	Argument name {name} should be lowercase (used in sklearn API)
    "ANN101", # type annotation for self arg in classes
    "ANN102", # type annoation for cls in class methods
    "TRY003", # Avoid specifying messages outside exception class
    "INP001", # Implicit namespace package
    "S311",   # Suspicious non cryptographic random usage
]


# Unlike Flake8, default to a complexity level of 10.
[tool.ruff.lint.mccabe]
max-complexity = 10


[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"


[tool.ruff.lint.pydocstyle]
convention = "google" # Accepts: "google", "numpy", or "pep257".


[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"


[tool.ruff.lint.per-file-ignores]
"**/{tests}/*" = ["S101"]


[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]


[tool.mypy]
ignore_missing_imports = true

warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true

strict_equality = true

check_untyped_defs = true

disallow_untyped_decorators = true
# disallow_any_generics = true

disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_defs = true

plugins = ["numpy.typing.mypy_plugin"]